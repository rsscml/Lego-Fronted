{"version":3,"sources":["./src/app/shared/forgot-password/forgot-password.component.html","./src/app/shared/login/login.component.html","./src/app/shared/reset-password/reset-password.component.html","./src/app/shared/forgot-password/forgot-password.component.css","./src/app/shared/forgot-password/forgot-password.component.ts","./src/app/shared/login/login.component.css","./src/app/shared/login/login.component.ts","./src/app/shared/reset-password/reset-password.component.css","./src/app/shared/reset-password/reset-password.component.ts","./src/app/shared/service/mustMatch.ts","./src/app/shared/shared-routing.module.ts","./src/app/shared/shared.module.ts"],"names":[],"mappings":"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","file":"shared-shared-module.js","sourcesContent":["export default \"<div class=\\\"login-middle\\\">\\n  <div class=\\\"login\\\">\\n    <div class=\\\"login-body\\\">\\n      <a class=\\\"login-brand\\\" href=\\\"javascript:void(0)\\\">\\n        <img class=\\\"img-responsive\\\" src=\\\"assets/img/logo.png\\\" alt=\\\"logo\\\">\\n      </a>\\n      <!-- <p class=\\\"invalid-feedback\\\" *ngIf=\\\"invalidEmail\\\">{{errorMessage}}</p> -->\\n      <div class=\\\"login-form\\\">\\n        <form [formGroup]=\\\"forgotPassword\\\" (ngSubmit)=\\\"onSubmit()\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>Enter Email</label>\\n            <input class=\\\"form-control\\\" type=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" [ngClass]=\\\"{'is-invalid': submitted && f.email.error}\\\">\\n            <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.email.errors.required\\\">Email is required.</div>\\n              <div *ngIf=\\\"f.email.errors.email\\\">Enter must be a valid email address.</div>\\n            </div>\\n            <div>\\n              <span style=\\\"color:red;margin-top: 5px\\\">{{errormessage}}</span>\\n            </div>\\n            <div>\\n              <span style=\\\"color:green;margin-top: 5px\\\">{{successmessage}}</span>\\n            </div>\\n          </div>\\n          <button class=\\\"btn btn-primary btn-block\\\" type=\\\"submit\\\">Send link</button>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Modal -->\\n<div class=\\\"modal fade\\\" id=\\\"success-modal\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" data-dismiss=\\\"modal\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body text-center\\\">\\n        <h2><i class=\\\"fa fa-check-circle text-success\\\"></i></h2>\\n        <h5>{{successMessage}}!</h5>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","export default \"<div class=\\\"login-middle\\\">\\n  <div class=\\\"login\\\">\\n    <div class=\\\"login-body\\\">\\n      <a class=\\\"login-brand\\\" href=\\\"javascript:void(0)\\\">\\n        <img class=\\\"img-responsive\\\" src=\\\"assets/img/logo.png\\\" alt=\\\"logo\\\">\\n      </a>\\n      <p class=\\\"invalid-feedback\\\" *ngIf=\\\"invalidLogin\\\">{{errormessage}}</p>\\n      <div class=\\\"login-form\\\">\\n        <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"email\\\">Email</label>\\n            <input id=\\\"email\\\" class=\\\"form-control\\\" type=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" [ngClass]=\\\"{'is-invalid': submitted && f.email.errors}\\\"/>\\n            <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.email.errors.required\\\">Email is required.</div>\\n              <div *ngIf=\\\"f.email.errors.email\\\">Enter must be a valid email address.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\">Password</label>\\n            <input id=\\\"password\\\" class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"password\\\" formControlName=\\\"password\\\" [ngClass]=\\\"{'is-invalid': submitted && f.password.errors}\\\">\\n            <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.password.errors.required\\\">Password is required.</div>\\n              <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label class=\\\"custom-control custom-control-primary custom-checkbox\\\">\\n              <input class=\\\"custom-control-input\\\" type=\\\"checkbox\\\" checked=\\\"checked\\\" id=\\\"rememberMe\\\">\\n              <span class=\\\"custom-control-indicator\\\"></span>\\n              <span class=\\\"custom-control-label\\\">Remember me</span>\\n            </label>\\n            <a routerLink=\\\"/forgot-password\\\" class=\\\"pull-right\\\">Forgot password?</a>\\n          </div>\\n          <button class=\\\"btn btn-primary btn-block\\\" type=\\\"submit\\\">Sign in</button>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Modal -->\\n<div class=\\\"modal fade\\\" id=\\\"success-modal\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" data-dismiss=\\\"modal\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body text-center\\\">\\n        <h2><i class=\\\"fa fa-check-circle text-success\\\"></i></h2>\\n        <h5>{{successMessage}}!</h5>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","export default \"<div class=\\\"login-middle\\\">\\n  <div class=\\\"login\\\">\\n    <div class=\\\"login-body\\\">\\n      <a class=\\\"login-brand\\\" href=\\\"javascript:void(0)\\\">\\n        <img class=\\\"img-responsive\\\" src=\\\"assets/img/logo.png\\\" alt=\\\"logo\\\">\\n      </a>\\n      <p *ngIf=\\\"errorMessage\\\">{{errormessage}}</p>\\n      <div class=\\\"login-form\\\">\\n        <form [formGroup]=\\\"resetPassword\\\" (ngSubmit)=\\\"onSubmit()\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>New Password</label>\\n            <input class=\\\"form-control\\\" type=\\\"password\\\" formControlName=\\\"newPassword\\\" (ngClass)=\\\"{'is-invalid': submitted && f.newPassword.errors}\\\"/>\\n            <div *ngIf=\\\"submitted && f.newPassword.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.newPassword.errors.required\\\">Password is required.</div>\\n              <div *ngIf=\\\"f.newPassword.errors.minlength\\\">Password must be at list 8 character.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label>Confirm New Password</label>\\n            <input class=\\\"form-control\\\" type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" (ngClass)=\\\"{'is-invalid': submitted && f.confirmPassword.errors}\\\" />\\n            <div *ngIf=\\\"submitted && f.confirmPassword.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.confirmPassword.errors.required\\\">Password is required.</div>\\n              <div *ngIf=\\\"f.confirmPassword.errors.minlength\\\">Password must be at list 8 character.</div>\\n              <div *ngIf=\\\"f.confirmPassword.errors.mustMatch\\\">Password does not matching.</div>\\n            </div>\\n          </div>\\n          <button class=\\\"btn btn-primary btn-block\\\" type=\\\"submit\\\">Sign in</button>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Modal -->\\n<div class=\\\"modal fade\\\" id=\\\"success-modal\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" data-dismiss=\\\"modal\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body text-center\\\">\\n        <h2><i class=\\\"fa fa-check-circle text-success\\\"></i></h2>\\n        <h5>Password changed successfully!</h5>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","export default \"body{display:table-cell;vertical-align:middle;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2ZvcmdvdC1wYXNzd29yZC9mb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxLQUFLLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL2ZvcmdvdC1wYXNzd29yZC9mb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImJvZHl7ZGlzcGxheTp0YWJsZS1jZWxsO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTt9Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../service/authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPassword: FormGroup;\n  submitted= false;\n  constructor(\n    private formBuilder: FormBuilder,\n    private auth: AuthenticationService, \n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.forgotPassword = this.formBuilder.group({\n      email: ['',[Validators.required, Validators.email]]\n    })\n  }\n\n  get f(){return this.forgotPassword.controls;}\n\n  // Forgot Service\n  invalidEmail= false;\n  errormessage;\n  successmessage;\n\n  onSubmit(){\n    this.submitted=true;\n\n    // stop here if form is invalid\n    if(this.forgotPassword.invalid){\n      return;\n    }\n\n    this.auth.forgot(this.forgotPassword.value.email).subscribe(\n      data=>{\n        localStorage.setItem('forgot', JSON.stringify(this.forgotPassword.value.email));\n        this.loginSuccess(data['message'])\n      },\n      error=>{\n        console.log(error);\n        this.invalidEmail = true\n        this.loginError(error.error.message);\n      }\n      \n    )\n  }\n  loginError(e) {\n    console.log(e);\n    this.errormessage = e;\n    setTimeout(() => {\n      this.errormessage = \"\";\n    }, 4000);\n  }\n  loginSuccess(e) {\n    console.log(e);\n    this.successmessage = e;\n    setTimeout(() => {\n      this.successmessage = \"\";\n    }, 4000);\n    //instead of diverting to reset password it should go to otp verify here\n    //this.router.navigateByUrl('/reset-password');\n  }\n}\n","export default \"body{display:table-cell !important;vertical-align:middle !important;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsS0FBSyw2QkFBNkIsQ0FBQyxnQ0FBZ0MsQ0FBQyIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYm9keXtkaXNwbGF5OnRhYmxlLWNlbGwgIWltcG9ydGFudDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGUgIWltcG9ydGFudDt9Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../service/authentication.service';\nimport { Router } from '@angular/router';\ndeclare var $:any;\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  \n  loginForm: FormGroup;\n  submitted= false;\n  \n  constructor(\n    private formBuilder: FormBuilder, \n    private auth: AuthenticationService, \n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    if(this.auth.isLogin()){\n      console.log('already logged in')\n      this.router.navigateByUrl('/home/dashboard');\n    }\n\n    var remembered = window.localStorage.getItem('rememberMe');\n\n    if(remembered==undefined){\n      this.loginForm = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(8)]]\n      });\n    }else{\n      let rem = JSON.parse(remembered);\n      this.loginForm = this.formBuilder.group({\n        email: [rem.email, [Validators.required, Validators.email]],\n        password: [rem.password, [Validators.required, Validators.minLength(8)]]\n      });\n    }\n\n  }\n  \n  get f(){return this.loginForm.controls;}\n\n  // Login Service\n  invalidLogin= false;\n  errormessage;\n  successmessage;\n\n  onSubmit(){\n    if($('#rememberMe').is(':checked')){\n      let remember={\n        email: this.loginForm.value.email,\n        password: this.loginForm.value.password,\n      }\n      window.localStorage.setItem('rememberMe', JSON.stringify(remember));\n    }else{\n      window.localStorage.removeItem('rememberMe');\n    }\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n        return;\n    }\n    let data = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    }\n    this.auth.login(data).subscribe(\n      data=> {\n        console.log('inside data')\n        console.log(data)\n        console.log(JSON.stringify(data['data']))\n        console.log(JSON.stringify(data['data']['token']))\n\n        var remembered = localStorage.getItem('rememberMe');\n\n        if(remembered==undefined){\n          sessionStorage.setItem('currentUser', JSON.stringify(data['data']));\n          sessionStorage.setItem('token', JSON.stringify(data['data']['token']));\n        }else{\n          localStorage.setItem('currentUser', JSON.stringify(data['data']));\n          localStorage.setItem('token', JSON.stringify(data['data']['token']));\n        }\n        this.router.navigateByUrl('/home/dashboard');\n      },\n      error=> {\n        console.log(error);\n        this.invalidLogin = true\n        //var message = error.error.message\n        var message = \"Invalid credentials..!\"\n        //var token = localStorage.getItem('currentUser');\n        //if(token){\n          //message=\"Invalid credentials..!\"\n        //}\n        sessionStorage.clear();\n        localStorage.clear();\n        this.auth.logout();\n        this.loginError(message);\n      }\n    );\n  }\n  loginError(e) {\n    console.log(e);\n    this.errormessage = e;\n    setTimeout(() => {\n      this.errormessage = \"\";\n    }, 4000);\n  }\n}\n","export default \"body{display:table-cell;vertical-align:middle;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsS0FBSyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQyIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9yZXNldC1wYXNzd29yZC9yZXNldC1wYXNzd29yZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYm9keXtkaXNwbGF5OnRhYmxlLWNlbGw7dmVydGljYWwtYWxpZ246bWlkZGxlO30iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../service/authentication.service'\nimport { Router } from '@angular/router';\nimport { MustMatch } from '../service/mustMatch';\ndeclare var $:any;\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n  resetPassword: FormGroup;\n  submitted= false;\n  \n  constructor(\n    private formBuilder: FormBuilder, \n    private auth: AuthenticationService, \n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.resetPassword = this.formBuilder.group({\n      newPassword:['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword:['', [Validators.required, Validators.minLength(8)]]\n    },{\n      validators: MustMatch('newPassword', 'confirmPassword')\n    });\n\n  }\n\n  get f(){return this.resetPassword.controls}\n\n  // Forgot Service\n  errormessage;\n  successmessage;\n\n  onSubmit(){\n    this.submitted=true;\n    if(this.resetPassword.invalid){\n      return;\n    }\n\n    let data={\n      email: JSON.parse(localStorage.getItem('forgot')),\n      password: this.resetPassword.value.confirmPassword\n    }\n    this.auth.reset(data).subscribe(\n      data=>{\n        console.log(data)\n        $(\"#success-modal\").modal('show');        \n        this.successmessage = data['message'];\n        setTimeout(function(){\n          $(\"#success-modal\").modal('hide');\n        },1500);\n        setTimeout(() => {\n          this.router.navigateByUrl('/login');\n        }, 1600);\n        localStorage.removeItem('forgot');\n      },\n      error=>{\n        console.log(error);\n        this.loginError(error.error.message);\n      }\n    )\n  }\n  loginError(e) {\n    console.log(e);\n    this.errormessage = e;\n    setTimeout(() => {\n      this.errormessage = \"\";\n    }, 4000);\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'forgot-password', component: ForgotPasswordComponent },\n  { path: 'reset-password', component: ResetPasswordComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SharedRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { SharedRoutingModule } from './shared-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [\n    // SharedComponent\n    LoginComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SharedModule { }\n"],"sourceRoot":"webpack:///"}